// @mixin

// @include clearfix;
@mixin clearfix {
    &:after {
        content: '';
        display: block;
        clear: both;
    }
}

// @include blind;
@mixin blind {
    position: absolute;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    border: 0;
    padding: 0;
    white-space: nowrap;
}

// @include textBlind;
@mixin textBlind {
    text-indent: -9999px;
    color: transparent;
    font-size: 1px;
    overflow: hidden;
}

// positioning 한줄 축약 mixin
@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);

        @if $i and $i + 1<= length($args) and type-of(nth($args, $i + 1)) == number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

// @include absolute(top 0 right 0 bottom left 0);
@mixin absolute($args) {
    @include position(absolute, $args);
}

// @include fixed(top 0 right 0 bottom left 0);
@mixin fixed($args) {
    @include position(fixed, $args);
}

// @include relative(top 0 right 0 bottom left 0);
@mixin relative($args) {
    @include position(relative, $args);
}

// text-ellipsis
@mixin ellipsis($line: 1) {
    @if ($line == 1) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: $line;
    }
}

// inline-block 에 vertical-align : top을 일일히 붙히지 않아도 되는 mixin
@mixin inline-block-box($vertical-align: top) {
    display: inline-block;
    vertical-align: $vertical-align;
}

// placeholders
@mixin input-placeholder {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

// pseudo (::before, ::after)
@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}

// display flex
@mixin flex($align: center, $justify: center) {
    display: flex;
    align-items: $align;
    justify-content: $justify;
}

// responsive box
@mixin responsive-box($width, $height) {
    $padding: unquote(calc($height / $width) * 100 + '%');
    position: relative;
    display: block;
    width: 100%;
    height: 0;
    padding-top: $padding;
}

// box-shadow
@mixin box-shadow($x: 0px, $y: 3px, $blur: 6px, $spread: 0px, $color: rgba(0, 0, 0, 0.25)) {
    box-shadow: $x $y $blur $spread $color !important;
}

// montserrat font
@mixin montserrat {
    font-family: 'Montserrat', sans-serif !important;
}

@mixin vh-100 {
    height: var(--window-inner-height);
}

// media query
$breakpoints: (
    'phone': 360px,
    'phone-wide': 480px,
    'phablet': 640px,
    'tablet-small': 768px,
    'tablet': 960px,
    'tablet-wide': 1080px,
    'desktop': 1280px,
    'desktop-wide': 1440px,
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}
